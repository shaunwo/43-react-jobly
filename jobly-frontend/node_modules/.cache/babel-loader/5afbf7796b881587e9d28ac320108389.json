{"ast":null,"code":"import _slicedToArray from \"/Users/shaun/git/shaunwo-private/43-react-jobly/jobly-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\n\n/** Custom hook for keeping state data synced with localStorage.\n *\n * This creates `item` as state and look in localStorage for current value\n * (if not found, defaults to `firstValue`)\n *\n * When `item` changes, effect re-runs:\n * - if new state is null, removes from localStorage\n * - else, updates localStorage\n *\n * To the component, this just acts like state that is also synced to/from\n * localStorage::\n *\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\n */\n\nfunction useLocalStorage(key) {\n  var firstValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var initialValue = localStorage.getItem(key) || firstValue;\n  var _useState = useState(initialValue),\n    _useState2 = _slicedToArray(_useState, 2),\n    item = _useState2[0],\n    setItem = _useState2[1];\n  useEffect(function setKeyInLocalStorage() {\n    console.debug('hooks useLocalStorage useEffect', 'item=', item);\n    if (item === null) {\n      localStorage.removeItem(key);\n    } else {\n      localStorage.setItem(key, item);\n    }\n  }, [key, item]);\n  return [item, setItem];\n}\nexport default useLocalStorage;","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","firstValue","initialValue","localStorage","getItem","item","setItem","setKeyInLocalStorage","console","debug","removeItem"],"sources":["/Users/shaun/git/shaunwo-private/43-react-jobly/jobly-frontend/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\n/** Custom hook for keeping state data synced with localStorage.\n *\n * This creates `item` as state and look in localStorage for current value\n * (if not found, defaults to `firstValue`)\n *\n * When `item` changes, effect re-runs:\n * - if new state is null, removes from localStorage\n * - else, updates localStorage\n *\n * To the component, this just acts like state that is also synced to/from\n * localStorage::\n *\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\n */\n\nfunction useLocalStorage(key, firstValue = null) {\n\tconst initialValue = localStorage.getItem(key) || firstValue;\n\n\tconst [item, setItem] = useState(initialValue);\n\n\tuseEffect(\n\t\tfunction setKeyInLocalStorage() {\n\t\t\tconsole.debug('hooks useLocalStorage useEffect', 'item=', item);\n\n\t\t\tif (item === null) {\n\t\t\t\tlocalStorage.removeItem(key);\n\t\t\t} else {\n\t\t\t\tlocalStorage.setItem(key, item);\n\t\t\t}\n\t\t},\n\t\t[key, item]\n\t);\n\n\treturn [item, setItem];\n}\n\nexport default useLocalStorage;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,eAAe,CAACC,GAAG,EAAqB;EAAA,IAAnBC,UAAU,uEAAG,IAAI;EAC9C,IAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAACJ,GAAG,CAAC,IAAIC,UAAU;EAAC,gBAErCJ,QAAQ,CAACK,YAAY,CAAC;IAAA;IAAvCG,IAAI;IAAEC,OAAO;EAEpBR,SAAS,CACR,SAASS,oBAAoB,GAAG;IAC/BC,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAE,OAAO,EAAEJ,IAAI,CAAC;IAE/D,IAAIA,IAAI,KAAK,IAAI,EAAE;MAClBF,YAAY,CAACO,UAAU,CAACV,GAAG,CAAC;IAC7B,CAAC,MAAM;MACNG,YAAY,CAACG,OAAO,CAACN,GAAG,EAAEK,IAAI,CAAC;IAChC;EACD,CAAC,EACD,CAACL,GAAG,EAAEK,IAAI,CAAC,CACX;EAED,OAAO,CAACA,IAAI,EAAEC,OAAO,CAAC;AACvB;AAEA,eAAeP,eAAe"},"metadata":{},"sourceType":"module"}